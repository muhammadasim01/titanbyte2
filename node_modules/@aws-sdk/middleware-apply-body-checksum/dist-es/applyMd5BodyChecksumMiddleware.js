import { __assign, __awaiter, __generator, __values } from "tslib";
import { isArrayBuffer } from "@aws-sdk/is-array-buffer";
import { HttpRequest } from "@aws-sdk/protocol-http";
export var applyMd5BodyChecksumMiddleware = function (options) {
    return function (next) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var request, body, headers, digest, hash, _a, _b, _c, _d, _e;
            var _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        request = args.request;
                        if (!HttpRequest.isInstance(request)) return [3, 2];
                        body = request.body, headers = request.headers;
                        if (!!hasHeader("content-md5", headers)) return [3, 2];
                        digest = void 0;
                        if (body === undefined || typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
                            hash = new options.md5();
                            hash.update(body || "");
                            digest = hash.digest();
                        }
                        else {
                            digest = options.streamHasher(options.md5, body);
                        }
                        _a = [__assign({}, request)];
                        _f = {};
                        _b = [__assign({}, headers)];
                        _g = {};
                        _c = "content-md5";
                        _e = (_d = options).base64Encoder;
                        return [4, digest];
                    case 1:
                        request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));
                        _h.label = 2;
                    case 2: return [2, next(__assign(__assign({}, args), { request: request }))];
                }
            });
        }); };
    };
};
export var applyMd5BodyChecksumMiddlewareOptions = {
    name: "applyMd5BodyChecksumMiddleware",
    step: "build",
    tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"],
    override: true,
};
export var getApplyMd5BodyChecksumPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);
    },
}); };
var hasHeader = function (soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQWNyRCxNQUFNLENBQUMsSUFBTSw4QkFBOEIsR0FDekMsVUFBQyxPQUFzQztJQUN2QyxPQUFBLFVBQWdDLElBQStCO1FBQy9ELE9BQUEsVUFBTyxJQUFnQzs7Ozs7O3dCQUMvQixPQUFPLEdBQUssSUFBSSxRQUFULENBQVU7NkJBQ25CLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQS9CLGNBQStCO3dCQUN6QixJQUFJLEdBQWMsT0FBTyxLQUFyQixFQUFFLE9BQU8sR0FBSyxPQUFPLFFBQVosQ0FBYTs2QkFDOUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFsQyxjQUFrQzt3QkFDaEMsTUFBTSxTQUFxQixDQUFDO3dCQUNoQyxJQUFJLElBQUksS0FBSyxTQUFTLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFOzRCQUMvRixJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7NEJBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDOzRCQUN4QixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO3lCQUN4Qjs2QkFBTTs0QkFDTCxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO3lCQUNsRDsyQ0FHSSxPQUFPOzsyQ0FFTCxPQUFPOzt3QkFDVixLQUFBLGFBQWEsQ0FBQTt3QkFBRSxLQUFBLENBQUEsS0FBQSxPQUFPLENBQUEsQ0FBQyxhQUFhLENBQUE7d0JBQUMsV0FBTSxNQUFNLEVBQUE7O3dCQUpyRCxPQUFPLHNDQUVMLFVBQU8sc0NBRUwsTUFBYSxHQUFFLGNBQXNCLFNBQVksRUFBQyxnQkFFckQsQ0FBQzs7NEJBR04sV0FBTyxJQUFJLHVCQUNOLElBQUksS0FDUCxPQUFPLFNBQUEsSUFDUCxFQUFDOzs7YUFDSjtJQTNCRCxDQTJCQztBQTVCRCxDQTRCQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0scUNBQXFDLEdBQXdCO0lBQ3hFLElBQUksRUFBRSxnQ0FBZ0M7SUFDdEMsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLENBQUM7SUFDMUMsUUFBUSxFQUFFLElBQUk7Q0FDZixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sNkJBQTZCLEdBQUcsVUFBQyxNQUFxQyxJQUEwQixPQUFBLENBQUM7SUFDNUcsWUFBWSxFQUFFLFVBQUMsV0FBVztRQUN4QixXQUFXLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxFQUFFLHFDQUFxQyxDQUFDLENBQUM7SUFDakcsQ0FBQztDQUNGLENBQUMsRUFKMkcsQ0FJM0csQ0FBQztBQUVILElBQU0sU0FBUyxHQUFHLFVBQUMsWUFBb0IsRUFBRSxPQUFrQjs7SUFDekQsWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7UUFDMUMsS0FBeUIsSUFBQSxLQUFBLFNBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUExQyxJQUFNLFVBQVUsV0FBQTtZQUNuQixJQUFJLFlBQVksS0FBSyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQzdDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjs7Ozs7Ozs7O0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHtcbiAgQnVpbGRIYW5kbGVyLFxuICBCdWlsZEhhbmRsZXJBcmd1bWVudHMsXG4gIEJ1aWxkSGFuZGxlck9wdGlvbnMsXG4gIEJ1aWxkSGFuZGxlck91dHB1dCxcbiAgQnVpbGRNaWRkbGV3YXJlLFxuICBIZWFkZXJCYWcsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL21kNUNvbmZpZ3VyYXRpb25cIjtcblxuZXhwb3J0IGNvbnN0IGFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZSA9XG4gIChvcHRpb25zOiBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZyk6IEJ1aWxkTWlkZGxld2FyZTxhbnksIGFueT4gPT5cbiAgPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihuZXh0OiBCdWlsZEhhbmRsZXI8YW55LCBPdXRwdXQ+KTogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0PiA9PlxuICBhc3luYyAoYXJnczogQnVpbGRIYW5kbGVyQXJndW1lbnRzPGFueT4pOiBQcm9taXNlPEJ1aWxkSGFuZGxlck91dHB1dDxPdXRwdXQ+PiA9PiB7XG4gICAgbGV0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkge1xuICAgICAgY29uc3QgeyBib2R5LCBoZWFkZXJzIH0gPSByZXF1ZXN0O1xuICAgICAgaWYgKCFoYXNIZWFkZXIoXCJjb250ZW50LW1kNVwiLCBoZWFkZXJzKSkge1xuICAgICAgICBsZXQgZGlnZXN0OiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuICAgICAgICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiIHx8IEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSB8fCBpc0FycmF5QnVmZmVyKGJvZHkpKSB7XG4gICAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBvcHRpb25zLm1kNSgpO1xuICAgICAgICAgIGhhc2gudXBkYXRlKGJvZHkgfHwgXCJcIik7XG4gICAgICAgICAgZGlnZXN0ID0gaGFzaC5kaWdlc3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWdlc3QgPSBvcHRpb25zLnN0cmVhbUhhc2hlcihvcHRpb25zLm1kNSwgYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgICAgICAgIFwiY29udGVudC1tZDVcIjogb3B0aW9ucy5iYXNlNjRFbmNvZGVyKGF3YWl0IGRpZ2VzdCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgLi4uYXJncyxcbiAgICAgIHJlcXVlc3QsXG4gICAgfSk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCBhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmVPcHRpb25zOiBCdWlsZEhhbmRsZXJPcHRpb25zID0ge1xuICBuYW1lOiBcImFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImJ1aWxkXCIsXG4gIHRhZ3M6IFtcIlNFVF9DT05URU5UX01ENVwiLCBcIkJPRFlfQ0hFQ0tTVU1cIl0sXG4gIG92ZXJyaWRlOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldEFwcGx5TWQ1Qm9keUNoZWNrc3VtUGx1Z2luID0gKGNvbmZpZzogTWQ1Qm9keUNoZWNrc3VtUmVzb2x2ZWRDb25maWcpOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKGFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZShjb25maWcpLCBhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuXG5jb25zdCBoYXNIZWFkZXIgPSAoc291Z2h0SGVhZGVyOiBzdHJpbmcsIGhlYWRlcnM6IEhlYWRlckJhZyk6IGJvb2xlYW4gPT4ge1xuICBzb3VnaHRIZWFkZXIgPSBzb3VnaHRIZWFkZXIudG9Mb3dlckNhc2UoKTtcbiAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgaWYgKHNvdWdodEhlYWRlciA9PT0gaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIl19
import { __read } from "tslib";
export var validate = function (str) {
    return typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
};
export var parse = function (arn) {
    var segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn")
        throw new Error("Malformed ARN");
    var _a = __read(segments), partition = _a[1], service = _a[2], region = _a[3], accountId = _a[4], resource = _a.slice(5);
    return {
        partition: partition,
        service: service,
        region: region,
        accountId: accountId,
        resource: resource.join(":"),
    };
};
export var build = function (arnObject) {
    var _a = arnObject.partition, partition = _a === void 0 ? "aws" : _a, service = arnObject.service, region = arnObject.region, accountId = arnObject.accountId, resource = arnObject.resource;
    if ([service, region, accountId, resource].some(function (segment) { return typeof segment !== "string"; })) {
        throw new Error("Input ARN object is invalid");
    }
    return "arn:" + partition + ":" + service + ":" + region + ":" + accountId + ":" + resource;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVVBLE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxVQUFDLEdBQVE7SUFDL0IsT0FBQSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQztBQUFsRixDQUFrRixDQUFDO0FBS3JGLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxVQUFDLEdBQVc7SUFDL0IsSUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RSxJQUFBLEtBQUEsT0FRRixRQUFRLENBQUEsRUFMVixTQUFTLFFBQUEsRUFDVCxPQUFPLFFBQUEsRUFDUCxNQUFNLFFBQUEsRUFDTixTQUFTLFFBQUEsRUFDTixRQUFRLGNBQ0QsQ0FBQztJQUViLE9BQU87UUFDTCxTQUFTLFdBQUE7UUFDVCxPQUFPLFNBQUE7UUFDUCxNQUFNLFFBQUE7UUFDTixTQUFTLFdBQUE7UUFDVCxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7S0FDN0IsQ0FBQztBQUNKLENBQUMsQ0FBQztBQU9GLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxVQUFDLFNBQXVCO0lBQ25DLElBQUEsS0FBNEQsU0FBUyxVQUFwRCxFQUFqQixTQUFTLG1CQUFHLEtBQUssS0FBQSxFQUFFLE9BQU8sR0FBa0MsU0FBUyxRQUEzQyxFQUFFLE1BQU0sR0FBMEIsU0FBUyxPQUFuQyxFQUFFLFNBQVMsR0FBZSxTQUFTLFVBQXhCLEVBQUUsUUFBUSxHQUFLLFNBQVMsU0FBZCxDQUFlO0lBQzlFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQTNCLENBQTJCLENBQUMsRUFBRTtRQUN6RixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFDRCxPQUFPLFNBQU8sU0FBUyxTQUFJLE9BQU8sU0FBSSxNQUFNLFNBQUksU0FBUyxTQUFJLFFBQVUsQ0FBQztBQUMxRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIEFSTiB7XG4gIHBhcnRpdGlvbjogc3RyaW5nO1xuICBzZXJ2aWNlOiBzdHJpbmc7XG4gIHJlZ2lvbjogc3RyaW5nO1xuICBhY2NvdW50SWQ6IHN0cmluZztcbiAgcmVzb3VyY2U6IHN0cmluZztcbn1cbi8qKlxuICogVmFsaWRhdGUgd2hldGhlciBhIHN0cmluZyBpcyBhbiBBUk4uXG4gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZSA9IChzdHI6IGFueSk6IGJvb2xlYW4gPT5cbiAgdHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIuaW5kZXhPZihcImFybjpcIikgPT09IDAgJiYgc3RyLnNwbGl0KFwiOlwiKS5sZW5ndGggPj0gNjtcblxuLyoqXG4gKiBQYXJzZSBhbiBBUk4gc3RyaW5nIGludG8gc3RydWN0dXJlIHdpdGggcGFydGl0aW9uLCBzZXJ2aWNlLCByZWdpb24sIGFjY291bnRJZCBhbmQgcmVzb3VyY2UgdmFsdWVzXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZSA9IChhcm46IHN0cmluZyk6IEFSTiA9PiB7XG4gIGNvbnN0IHNlZ21lbnRzID0gYXJuLnNwbGl0KFwiOlwiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA8IDYgfHwgc2VnbWVudHNbMF0gIT09IFwiYXJuXCIpIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBBUk5cIik7XG4gIGNvbnN0IFtcbiAgICAsXG4gICAgLy9Ta2lwIFwiYXJuXCIgbGl0ZXJhbFxuICAgIHBhcnRpdGlvbixcbiAgICBzZXJ2aWNlLFxuICAgIHJlZ2lvbixcbiAgICBhY2NvdW50SWQsXG4gICAgLi4ucmVzb3VyY2VcbiAgXSA9IHNlZ21lbnRzO1xuXG4gIHJldHVybiB7XG4gICAgcGFydGl0aW9uLFxuICAgIHNlcnZpY2UsXG4gICAgcmVnaW9uLFxuICAgIGFjY291bnRJZCxcbiAgICByZXNvdXJjZTogcmVzb3VyY2Uuam9pbihcIjpcIiksXG4gIH07XG59O1xuXG50eXBlIGJ1aWxkT3B0aW9ucyA9IE9taXQ8QVJOLCBcInBhcnRpdGlvblwiPiAmIHsgcGFydGl0aW9uPzogc3RyaW5nIH07XG5cbi8qKlxuICogQnVpbGQgYW4gQVJOIHdpdGggc2VydmljZSwgcGFydGl0aW9uLCByZWdpb24sIGFjY291bnRJZCwgYW5kIHJlc291cmNlcyBzdHJpbmdzXG4gKi9cbmV4cG9ydCBjb25zdCBidWlsZCA9IChhcm5PYmplY3Q6IGJ1aWxkT3B0aW9ucyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHsgcGFydGl0aW9uID0gXCJhd3NcIiwgc2VydmljZSwgcmVnaW9uLCBhY2NvdW50SWQsIHJlc291cmNlIH0gPSBhcm5PYmplY3Q7XG4gIGlmIChbc2VydmljZSwgcmVnaW9uLCBhY2NvdW50SWQsIHJlc291cmNlXS5zb21lKChzZWdtZW50KSA9PiB0eXBlb2Ygc2VnbWVudCAhPT0gXCJzdHJpbmdcIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBBUk4gb2JqZWN0IGlzIGludmFsaWRcIik7XG4gIH1cbiAgcmV0dXJuIGBhcm46JHtwYXJ0aXRpb259OiR7c2VydmljZX06JHtyZWdpb259OiR7YWNjb3VudElkfToke3Jlc291cmNlfWA7XG59O1xuIl19
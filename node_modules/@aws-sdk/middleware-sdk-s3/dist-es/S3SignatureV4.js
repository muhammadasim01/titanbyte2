import { __assign, __awaiter, __generator } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
var S3SignatureV4 = (function () {
    function S3SignatureV4(options) {
        this.sigv4Signer = new SignatureV4(options);
        this.signerOptions = options;
    }
    S3SignatureV4.prototype.sign = function (requestToSign, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (this.signerOptions.runtime !== "node")
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2, this.getSigv4aSigner().sign(requestToSign, options)];
                }
                return [2, this.sigv4Signer.sign(requestToSign, options)];
            });
        });
    };
    S3SignatureV4.prototype.presign = function (originalRequest, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (this.signerOptions.runtime !== "node")
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2, this.getSigv4aSigner().presign(originalRequest, options)];
                }
                return [2, this.sigv4Signer.presign(originalRequest, options)];
            });
        });
    };
    S3SignatureV4.prototype.getSigv4aSigner = function () {
        if (!this.sigv4aSigner) {
            var CrtSignerV4_1;
            try {
                CrtSignerV4_1 = require("@aws-sdk/signature-v4-crt").CrtSignerV4;
                if (typeof CrtSignerV4_1 !== "function")
                    throw new Error();
            }
            catch (e) {
                e.message =
                    e.message + "\nPlease check if you have installed \"@aws-sdk/signature-v4-crt\" package explicitly. \n" +
                        "For more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues";
                throw e;
            }
            this.sigv4aSigner = new CrtSignerV4_1(__assign(__assign({}, this.signerOptions), { signingAlgorithm: 1 }));
        }
        return this.sigv4aSigner;
    };
    return S3SignatureV4;
}());
export { S3SignatureV4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUEwQyxNQUFNLHVCQUF1QixDQUFDO0FBdUI1RjtJQUtFLHVCQUFZLE9BQXVCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQUVZLDRCQUFJLEdBQWpCLFVBQWtCLGFBQTBCLEVBQUUsT0FBcUM7UUFBckMsd0JBQUEsRUFBQSxZQUFxQzs7O2dCQUNqRixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO29CQUNqQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLE1BQU07d0JBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztvQkFDbEgsV0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBQztpQkFDNUQ7Z0JBQ0QsV0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUM7OztLQUN0RDtJQUVZLCtCQUFPLEdBQXBCLFVBQXFCLGVBQTRCLEVBQUUsT0FBd0M7UUFBeEMsd0JBQUEsRUFBQSxZQUF3Qzs7O2dCQUN6RixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO29CQUNqQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFLLE1BQU07d0JBQ3ZDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztvQkFDbEgsV0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsRUFBQztpQkFDakU7Z0JBQ0QsV0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLEVBQUM7OztLQUMzRDtJQUVPLHVDQUFlLEdBQXZCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDdEIsSUFBSSxhQUFrRixDQUFDO1lBQ3ZGLElBQUk7Z0JBQ0YsYUFBVyxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLFdBQVcsQ0FBQztnQkFDL0QsSUFBSSxPQUFPLGFBQVcsS0FBSyxVQUFVO29CQUFFLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQzthQUMxRDtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLENBQUMsQ0FBQyxPQUFPO29CQUNKLENBQUMsQ0FBQyxPQUFPLDhGQUF5Rjt3QkFDckcscUZBQXFGLENBQUM7Z0JBQ3hGLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7WUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksYUFBVyx1QkFDOUIsSUFBSSxDQUFDLGFBQWEsS0FDckIsZ0JBQWdCLEVBQUUsQ0FBQyxJQUNuQixDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hdHVyZVY0LCBTaWduYXR1cmVWNENyeXB0b0luaXQsIFNpZ25hdHVyZVY0SW5pdCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjRcIjtcbmltcG9ydCB0eXBlIHsgQ3J0U2lnbmVyVjQsIENydFNpZ25lclY0SW5pdCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCI7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgUmVxdWVzdFByZXNpZ25lcixcbiAgUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMsXG4gIFJlcXVlc3RTaWduZXIsXG4gIFJlcXVlc3RTaWduaW5nQXJndW1lbnRzLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgUzNTaWduZXJWNEluaXQgPSBTaWduYXR1cmVWNEluaXQgJlxuICBTaWduYXR1cmVWNENyeXB0b0luaXQgJiB7XG4gICAgcnVudGltZT86IHN0cmluZztcbiAgfTtcblxuLyoqXG4gKiBBIFNpZ1Y0LWNvbXBhdGlibGUgc2lnbmVyIGZvciBTMyBzZXJ2aWNlLiBJbiBvcmRlciB0byBzdXBwb3J0IFNpZ1Y0YSBhbGdvcml0aG0gYWNjb3JkaW5nIHRvIHRoZSBvcGVyYXRpb24gaW5wdXRcbiAqIGR5bmFtaWNhbGx5LCB0aGUgc2lnbmVyIHdyYXBzIG5hdGl2ZSBtb2R1bGUgU2lnVjRhIHNpZ25lciBhbmQgSlMgU2lnVjQgc2lnbmVyLiBJdCBzaWducyB0aGUgcmVxdWVzdCB3aXRoIFNpZ1Y0YVxuICogYWxnb3JpdGhtIGlmIHRoZSByZXF1ZXN0IG5lZWRzIHRvIGJlIHNpZ25lZCB3aXRoIGAqYCByZWdpb24uIE90aGVyd2lzZSwgaXQgc2lnbnMgdGhlIHJlcXVlc3Qgd2l0aCBub3JtYWwgU2lnVjRcbiAqIHNpZ25lci5cbiAqIE5vdGUgdGhhdCBTaWdWNGEgc2lnbmVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgbm93IGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBhIG5hdGl2ZSBkZXBlbmRlbmN5LlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFMzU2lnbmF0dXJlVjQgaW1wbGVtZW50cyBSZXF1ZXN0UHJlc2lnbmVyLCBSZXF1ZXN0U2lnbmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWd2NFNpZ25lcjogU2lnbmF0dXJlVjQ7XG4gIHByaXZhdGUgc2lndjRhU2lnbmVyPzogQ3J0U2lnbmVyVjQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2lnbmVyT3B0aW9uczogUzNTaWduZXJWNEluaXQ7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogUzNTaWduZXJWNEluaXQpIHtcbiAgICB0aGlzLnNpZ3Y0U2lnbmVyID0gbmV3IFNpZ25hdHVyZVY0KG9wdGlvbnMpO1xuICAgIHRoaXMuc2lnbmVyT3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2lnbihyZXF1ZXN0VG9TaWduOiBIdHRwUmVxdWVzdCwgb3B0aW9uczogUmVxdWVzdFNpZ25pbmdBcmd1bWVudHMgPSB7fSk6IFByb21pc2U8SHR0cFJlcXVlc3Q+IHtcbiAgICBpZiAob3B0aW9ucy5zaWduaW5nUmVnaW9uID09PSBcIipcIikge1xuICAgICAgaWYgKHRoaXMuc2lnbmVyT3B0aW9ucy5ydW50aW1lICE9PSBcIm5vZGVcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyByZXF1ZXN0IHJlcXVpcmVzIHNpZ25pbmcgd2l0aCBTaWdWNEFzeW1tZXRyaWMgYWxnb3JpdGhtLiBJdCdzIG9ubHkgYXZhaWxhYmxlIGluIE5vZGUuanNcIik7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTaWd2NGFTaWduZXIoKS5zaWduKHJlcXVlc3RUb1NpZ24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zaWd2NFNpZ25lci5zaWduKHJlcXVlc3RUb1NpZ24sIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0OiBIdHRwUmVxdWVzdCwgb3B0aW9uczogUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMgPSB7fSk6IFByb21pc2U8SHR0cFJlcXVlc3Q+IHtcbiAgICBpZiAob3B0aW9ucy5zaWduaW5nUmVnaW9uID09PSBcIipcIikge1xuICAgICAgaWYgKHRoaXMuc2lnbmVyT3B0aW9ucy5ydW50aW1lICE9PSBcIm5vZGVcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyByZXF1ZXN0IHJlcXVpcmVzIHNpZ25pbmcgd2l0aCBTaWdWNEFzeW1tZXRyaWMgYWxnb3JpdGhtLiBJdCdzIG9ubHkgYXZhaWxhYmxlIGluIE5vZGUuanNcIik7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTaWd2NGFTaWduZXIoKS5wcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2lndjRhU2lnbmVyKCk6IENydFNpZ25lclY0IHtcbiAgICBpZiAoIXRoaXMuc2lndjRhU2lnbmVyKSB7XG4gICAgICBsZXQgQ3J0U2lnbmVyVjQ6IG5ldyAob3B0aW9uczogQ3J0U2lnbmVyVjRJbml0ICYgU2lnbmF0dXJlVjRDcnlwdG9Jbml0KSA9PiBDcnRTaWduZXJWNDtcbiAgICAgIHRyeSB7XG4gICAgICAgIENydFNpZ25lclY0ID0gcmVxdWlyZShcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIikuQ3J0U2lnbmVyVjQ7XG4gICAgICAgIGlmICh0eXBlb2YgQ3J0U2lnbmVyVjQgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGUubWVzc2FnZSA9XG4gICAgICAgICAgYCR7ZS5tZXNzYWdlfVxcblBsZWFzZSBjaGVjayBpZiB5b3UgaGF2ZSBpbnN0YWxsZWQgXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCIgcGFja2FnZSBleHBsaWNpdGx5LiBcXG5gICtcbiAgICAgICAgICBcIkZvciBtb3JlIGluZm9ybWF0aW9uIHBsZWFzZSBnbyB0byBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1zZGstanMtdjMja25vd24taXNzdWVzXCI7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgICB0aGlzLnNpZ3Y0YVNpZ25lciA9IG5ldyBDcnRTaWduZXJWNCh7XG4gICAgICAgIC4uLnRoaXMuc2lnbmVyT3B0aW9ucyxcbiAgICAgICAgc2lnbmluZ0FsZ29yaXRobTogMSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zaWd2NGFTaWduZXI7XG4gIH1cbn1cbiJdfQ==
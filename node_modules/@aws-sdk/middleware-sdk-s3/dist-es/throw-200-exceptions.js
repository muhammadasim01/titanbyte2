import { __awaiter, __generator } from "tslib";
import { HttpResponse } from "@aws-sdk/protocol-http";
export var throw200ExceptionsMiddleware = function (config) {
    return function (next) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var result, response, statusCode, body, bodyBytes, bodyString, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, next(args)];
                    case 1:
                        result = _a.sent();
                        response = result.response;
                        if (!HttpResponse.isInstance(response))
                            return [2, result];
                        statusCode = response.statusCode, body = response.body;
                        if (statusCode < 200 && statusCode >= 300)
                            return [2, result];
                        return [4, collectBody(body, config)];
                    case 2:
                        bodyBytes = _a.sent();
                        return [4, collectBodyString(bodyBytes, config)];
                    case 3:
                        bodyString = _a.sent();
                        if (bodyBytes.length === 0) {
                            err = new Error("S3 aborted request");
                            err.name = "InternalError";
                            throw err;
                        }
                        if (bodyString && bodyString.match("<Error>")) {
                            response.statusCode = 400;
                        }
                        response.body = bodyBytes;
                        return [2, result];
                }
            });
        }); };
    };
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
export var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true,
};
export var getThrow200ExceptionsPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3ctMjAwLWV4Y2VwdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdGhyb3ctMjAwLWV4Y2VwdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQWF0RCxNQUFNLENBQUMsSUFBTSw0QkFBNEIsR0FDdkMsVUFBQyxNQUEwQjtJQUMzQixPQUFBLFVBQUMsSUFBSTtRQUNMLE9BQUEsVUFBTyxJQUFJOzs7OzRCQUNNLFdBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFBOzt3QkFBekIsTUFBTSxHQUFHLFNBQWdCO3dCQUN2QixRQUFRLEdBQUssTUFBTSxTQUFYLENBQVk7d0JBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQzs0QkFBRSxXQUFPLE1BQU0sRUFBQzt3QkFDOUMsVUFBVSxHQUFXLFFBQVEsV0FBbkIsRUFBRSxJQUFJLEdBQUssUUFBUSxLQUFiLENBQWM7d0JBQ3RDLElBQUksVUFBVSxHQUFHLEdBQUcsSUFBSSxVQUFVLElBQUksR0FBRzs0QkFBRSxXQUFPLE1BQU0sRUFBQzt3QkFHdkMsV0FBTSxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFBOzt3QkFBM0MsU0FBUyxHQUFHLFNBQStCO3dCQUM5QixXQUFNLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsRUFBQTs7d0JBQXZELFVBQVUsR0FBRyxTQUEwQzt3QkFDN0QsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTs0QkFDcEIsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7NEJBQzVDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDOzRCQUMzQixNQUFNLEdBQUcsQ0FBQzt5QkFDWDt3QkFDRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFOzRCQUU3QyxRQUFRLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQzt5QkFDM0I7d0JBSUQsUUFBUSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7d0JBQzFCLFdBQU8sTUFBTSxFQUFDOzs7YUFDZjtJQXhCRCxDQXdCQztBQXpCRCxDQXlCQyxDQUFDO0FBR0osSUFBTSxXQUFXLEdBQUcsVUFBQyxVQUFrQyxFQUFFLE9BQTJCO0lBQS9ELDJCQUFBLEVBQUEsaUJBQXNCLFVBQVUsRUFBRTtJQUNyRCxJQUFJLFVBQVUsWUFBWSxVQUFVLEVBQUU7UUFDcEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsT0FBTyxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2xGLENBQUMsQ0FBQztBQUdGLElBQU0saUJBQWlCLEdBQUcsVUFBQyxVQUFlLEVBQUUsT0FBMkI7SUFDckUsT0FBQSxXQUFXLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQXpCLENBQXlCLENBQUM7QUFBMUUsQ0FBMEUsQ0FBQztBQUs3RSxNQUFNLENBQUMsSUFBTSxtQ0FBbUMsR0FBOEI7SUFDNUUsUUFBUSxFQUFFLE9BQU87SUFDakIsWUFBWSxFQUFFLHdCQUF3QjtJQUN0QyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUM7SUFDcEMsSUFBSSxFQUFFLDhCQUE4QjtJQUNwQyxRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFNRixNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRyxVQUFDLE1BQTBCLElBQTBCLE9BQUEsQ0FBQztJQUMvRixZQUFZLEVBQUUsVUFBQyxXQUFXO1FBQ3hCLFdBQVcsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUN2RyxDQUFDO0NBQ0YsQ0FBQyxFQUo4RixDQUk5RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IERlc2VyaWFsaXplTWlkZGxld2FyZSwgRW5jb2RlciwgUGx1Z2dhYmxlLCBSZWxhdGl2ZU1pZGRsZXdhcmVPcHRpb25zLCBTdHJlYW1Db2xsZWN0b3IgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxudHlwZSBQcmV2aW91c2x5UmVzb2x2ZWQgPSB7XG4gIHN0cmVhbUNvbGxlY3RvcjogU3RyZWFtQ29sbGVjdG9yO1xuICB1dGY4RW5jb2RlcjogRW5jb2Rlcjtcbn07XG5cbi8qKlxuICogSW4gY2FzZSBvZiBhbiBpbnRlcm5hbCBlcnJvci90ZXJtaW5hdGVkIGNvbm5lY3Rpb24sIFMzIG9wZXJhdGlvbnMgbWF5IHJldHVybiAyMDAgZXJyb3JzLiBDb3B5T2JqZWN0LCBVcGxvYWRQYXJ0Q29weSxcbiAqIENvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkIG1heSByZXR1cm4gZW1wdHkgcGF5bG9hZCBvciBwYXlsb2FkIHdpdGggb25seSB4bWwgUHJlYW1ibGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmUgPVxuICAoY29uZmlnOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBEZXNlcmlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+ID0+XG4gIChuZXh0KSA9PlxuICBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgY29uc3QgeyByZXNwb25zZSB9ID0gcmVzdWx0O1xuICAgIGlmICghSHR0cFJlc3BvbnNlLmlzSW5zdGFuY2UocmVzcG9uc2UpKSByZXR1cm4gcmVzdWx0O1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSwgYm9keSB9ID0gcmVzcG9uc2U7XG4gICAgaWYgKHN0YXR1c0NvZGUgPCAyMDAgJiYgc3RhdHVzQ29kZSA+PSAzMDApIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBUaHJvdyAyWFggcmVzcG9uc2UgdGhhdCdzIGVpdGhlciBhbiBlcnJvciBvciBoYXMgZW1wdHkgYm9keS5cbiAgICBjb25zdCBib2R5Qnl0ZXMgPSBhd2FpdCBjb2xsZWN0Qm9keShib2R5LCBjb25maWcpO1xuICAgIGNvbnN0IGJvZHlTdHJpbmcgPSBhd2FpdCBjb2xsZWN0Qm9keVN0cmluZyhib2R5Qnl0ZXMsIGNvbmZpZyk7XG4gICAgaWYgKGJvZHlCeXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIlMzIGFib3J0ZWQgcmVxdWVzdFwiKTtcbiAgICAgIGVyci5uYW1lID0gXCJJbnRlcm5hbEVycm9yXCI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGlmIChib2R5U3RyaW5nICYmIGJvZHlTdHJpbmcubWF0Y2goXCI8RXJyb3I+XCIpKSB7XG4gICAgICAvLyBTZXQgdGhlIGVycm9yIGNvZGUgdG8gNFhYIHNvIHRoYXQgZXJyb3IgZGVzZXJpYWxpemVyIGNhbiBwYXJzZSB0aGVtXG4gICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gNDAwO1xuICAgIH1cblxuICAgIC8vIEJvZHkgc3RyZWFtIGlzIGNvbnN1bWVkIGFuZCBwYXVzZWQgYXQgdGhpcyBwb2ludC4gU28gcmVwbGFjZSB0aGUgcmVzcG9uc2UuYm9keSB0byB0aGUgY29sbGVjdGVkIGJ5dGVzLlxuICAgIC8vIFNvIHRoYXQgdGhlIGRlc2VyaWFsaXplciBjYW4gY29uc3VtZSB0aGUgYm9keSBhcyBub3JtYWwuXG4gICAgcmVzcG9uc2UuYm9keSA9IGJvZHlCeXRlcztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4vLyBDb2xsZWN0IGxvdy1sZXZlbCByZXNwb25zZSBib2R5IHN0cmVhbSB0byBVaW50OEFycmF5LlxuY29uc3QgY29sbGVjdEJvZHkgPSAoc3RyZWFtQm9keTogYW55ID0gbmV3IFVpbnQ4QXJyYXkoKSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gIGlmIChzdHJlYW1Cb2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RyZWFtQm9keSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQuc3RyZWFtQ29sbGVjdG9yKHN0cmVhbUJvZHkpIHx8IFByb21pc2UucmVzb2x2ZShuZXcgVWludDhBcnJheSgpKTtcbn07XG5cbi8vIEVuY29kZSBVaW50OEFycmF5IGRhdGEgaW50byBzdHJpbmcgd2l0aCB1dGYtOC5cbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHk6IGFueSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxzdHJpbmc+ID0+XG4gIGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZU9wdGlvbnM6IFJlbGF0aXZlTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gIHJlbGF0aW9uOiBcImFmdGVyXCIsXG4gIHRvTWlkZGxld2FyZTogXCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIlRIUk9XXzIwMF9FWENFUFRJT05TXCIsIFwiUzNcIl0sXG4gIG5hbWU6IFwidGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbi8qKlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgZ2V0VGhyb3cyMDBFeGNlcHRpb25zUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8odGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZShjb25maWcpLCB0aHJvdzIwMEV4Y2VwdGlvbnNNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcbiJdfQ==
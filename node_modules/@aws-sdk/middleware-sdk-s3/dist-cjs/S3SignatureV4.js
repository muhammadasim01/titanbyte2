"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3SignatureV4 = void 0;
const signature_v4_1 = require("@aws-sdk/signature-v4");
class S3SignatureV4 {
    constructor(options) {
        this.sigv4Signer = new signature_v4_1.SignatureV4(options);
        this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
    }
    async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
            if (this.signerOptions.runtime !== "node")
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
    }
    getSigv4aSigner() {
        if (!this.sigv4aSigner) {
            let CrtSignerV4;
            try {
                CrtSignerV4 = require("@aws-sdk/signature-v4-crt").CrtSignerV4;
                if (typeof CrtSignerV4 !== "function")
                    throw new Error();
            }
            catch (e) {
                e.message =
                    `${e.message}\nPlease check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. \n` +
                        "For more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues";
                throw e;
            }
            this.sigv4aSigner = new CrtSignerV4({
                ...this.signerOptions,
                signingAlgorithm: 1,
            });
        }
        return this.sigv4aSigner;
    }
}
exports.S3SignatureV4 = S3SignatureV4;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUE0RjtBQXVCNUYsTUFBYSxhQUFhO0lBS3hCLFlBQVksT0FBdUI7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBMEIsRUFBRSxVQUFtQyxFQUFFO1FBQ2pGLElBQUksT0FBTyxDQUFDLGFBQWEsS0FBSyxHQUFHLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBSyxNQUFNO2dCQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLDhGQUE4RixDQUFDLENBQUM7WUFDbEgsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQTRCLEVBQUUsVUFBc0MsRUFBRTtRQUN6RixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEtBQUssTUFBTTtnQkFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RkFBOEYsQ0FBQyxDQUFDO1lBQ2xILE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDakU7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sZUFBZTtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixJQUFJLFdBQWtGLENBQUM7WUFDdkYsSUFBSTtnQkFDRixXQUFXLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUMsV0FBVyxDQUFDO2dCQUMvRCxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVU7b0JBQUUsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO2FBQzFEO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsQ0FBQyxDQUFDLE9BQU87b0JBQ1AsR0FBRyxDQUFDLENBQUMsT0FBTyx5RkFBeUY7d0JBQ3JHLHFGQUFxRixDQUFDO2dCQUN4RixNQUFNLENBQUMsQ0FBQzthQUNUO1lBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQztnQkFDbEMsR0FBRyxJQUFJLENBQUMsYUFBYTtnQkFDckIsZ0JBQWdCLEVBQUUsQ0FBQzthQUNwQixDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUEvQ0Qsc0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2lnbmF0dXJlVjQsIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCwgU2lnbmF0dXJlVjRJbml0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NFwiO1xuaW1wb3J0IHR5cGUgeyBDcnRTaWduZXJWNCwgQ3J0U2lnbmVyVjRJbml0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIjtcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBSZXF1ZXN0UHJlc2lnbmVyLFxuICBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyxcbiAgUmVxdWVzdFNpZ25lcixcbiAgUmVxdWVzdFNpZ25pbmdBcmd1bWVudHMsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBTM1NpZ25lclY0SW5pdCA9IFNpZ25hdHVyZVY0SW5pdCAmXG4gIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCAmIHtcbiAgICBydW50aW1lPzogc3RyaW5nO1xuICB9O1xuXG4vKipcbiAqIEEgU2lnVjQtY29tcGF0aWJsZSBzaWduZXIgZm9yIFMzIHNlcnZpY2UuIEluIG9yZGVyIHRvIHN1cHBvcnQgU2lnVjRhIGFsZ29yaXRobSBhY2NvcmRpbmcgdG8gdGhlIG9wZXJhdGlvbiBpbnB1dFxuICogZHluYW1pY2FsbHksIHRoZSBzaWduZXIgd3JhcHMgbmF0aXZlIG1vZHVsZSBTaWdWNGEgc2lnbmVyIGFuZCBKUyBTaWdWNCBzaWduZXIuIEl0IHNpZ25zIHRoZSByZXF1ZXN0IHdpdGggU2lnVjRhXG4gKiBhbGdvcml0aG0gaWYgdGhlIHJlcXVlc3QgbmVlZHMgdG8gYmUgc2lnbmVkIHdpdGggYCpgIHJlZ2lvbi4gT3RoZXJ3aXNlLCBpdCBzaWducyB0aGUgcmVxdWVzdCB3aXRoIG5vcm1hbCBTaWdWNFxuICogc2lnbmVyLlxuICogTm90ZSB0aGF0IFNpZ1Y0YSBzaWduZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcyBub3cgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIGEgbmF0aXZlIGRlcGVuZGVuY3kuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgUzNTaWduYXR1cmVWNCBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RTaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ3Y0U2lnbmVyOiBTaWduYXR1cmVWNDtcbiAgcHJpdmF0ZSBzaWd2NGFTaWduZXI/OiBDcnRTaWduZXJWNDtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWduZXJPcHRpb25zOiBTM1NpZ25lclY0SW5pdDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBTM1NpZ25lclY0SW5pdCkge1xuICAgIHRoaXMuc2lndjRTaWduZXIgPSBuZXcgU2lnbmF0dXJlVjQob3B0aW9ucyk7XG4gICAgdGhpcy5zaWduZXJPcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaWduKHJlcXVlc3RUb1NpZ246IEh0dHBSZXF1ZXN0LCBvcHRpb25zOiBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyA9IHt9KTogUHJvbWlzZTxIdHRwUmVxdWVzdD4ge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICBpZiAodGhpcy5zaWduZXJPcHRpb25zLnJ1bnRpbWUgIT09IFwibm9kZVwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHJlcXVlc3QgcmVxdWlyZXMgc2lnbmluZyB3aXRoIFNpZ1Y0QXN5bW1ldHJpYyBhbGdvcml0aG0uIEl0J3Mgb25seSBhdmFpbGFibGUgaW4gTm9kZS5qc1wiKTtcbiAgICAgIHJldHVybiB0aGlzLmdldFNpZ3Y0YVNpZ25lcigpLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJlc2lnbihvcmlnaW5hbFJlcXVlc3Q6IEh0dHBSZXF1ZXN0LCBvcHRpb25zOiBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyA9IHt9KTogUHJvbWlzZTxIdHRwUmVxdWVzdD4ge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICBpZiAodGhpcy5zaWduZXJPcHRpb25zLnJ1bnRpbWUgIT09IFwibm9kZVwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHJlcXVlc3QgcmVxdWlyZXMgc2lnbmluZyB3aXRoIFNpZ1Y0QXN5bW1ldHJpYyBhbGdvcml0aG0uIEl0J3Mgb25seSBhdmFpbGFibGUgaW4gTm9kZS5qc1wiKTtcbiAgICAgIHJldHVybiB0aGlzLmdldFNpZ3Y0YVNpZ25lcigpLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRTaWduZXIucHJlc2lnbihvcmlnaW5hbFJlcXVlc3QsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTaWd2NGFTaWduZXIoKTogQ3J0U2lnbmVyVjQge1xuICAgIGlmICghdGhpcy5zaWd2NGFTaWduZXIpIHtcbiAgICAgIGxldCBDcnRTaWduZXJWNDogbmV3IChvcHRpb25zOiBDcnRTaWduZXJWNEluaXQgJiBTaWduYXR1cmVWNENyeXB0b0luaXQpID0+IENydFNpZ25lclY0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgQ3J0U2lnbmVyVjQgPSByZXF1aXJlKFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0LWNydFwiKS5DcnRTaWduZXJWNDtcbiAgICAgICAgaWYgKHR5cGVvZiBDcnRTaWduZXJWNCAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZS5tZXNzYWdlID1cbiAgICAgICAgICBgJHtlLm1lc3NhZ2V9XFxuUGxlYXNlIGNoZWNrIGlmIHlvdSBoYXZlIGluc3RhbGxlZCBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIiBwYWNrYWdlIGV4cGxpY2l0bHkuIFxcbmAgK1xuICAgICAgICAgIFwiRm9yIG1vcmUgaW5mb3JtYXRpb24gcGxlYXNlIGdvIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLXNkay1qcy12MyNrbm93bi1pc3N1ZXNcIjtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2lndjRhU2lnbmVyID0gbmV3IENydFNpZ25lclY0KHtcbiAgICAgICAgLi4udGhpcy5zaWduZXJPcHRpb25zLFxuICAgICAgICBzaWduaW5nQWxnb3JpdGhtOiAxLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0YVNpZ25lcjtcbiAgfVxufVxuIl19
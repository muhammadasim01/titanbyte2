import { __asyncGenerator, __asyncValues, __await, __generator } from "tslib";
export function getUnmarshalledStream(source, options) {
    var _a;
    return _a = {},
        _a[Symbol.asyncIterator] = function () {
            return __asyncGenerator(this, arguments, function () {
                var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;
                var _a, _b;
                var e_1, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 12, 13, 18]);
                            source_1 = __asyncValues(source);
                            _d.label = 1;
                        case 1: return [4, __await(source_1.next())];
                        case 2:
                            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];
                            chunk = source_1_1.value;
                            message = options.eventMarshaller.unmarshall(chunk);
                            messageType = message.headers[":message-type"].value;
                            if (!(messageType === "error")) return [3, 3];
                            unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
                            unmodeledError.name = message.headers[":error-code"].value;
                            throw unmodeledError;
                        case 3:
                            if (!(messageType === "exception")) return [3, 5];
                            code = message.headers[":exception-type"].value;
                            exception = (_a = {}, _a[code] = message, _a);
                            return [4, __await(options.deserializer(exception))];
                        case 4:
                            deserializedException = _d.sent();
                            if (deserializedException.$unknown) {
                                error = new Error(options.toUtf8(message.body));
                                error.name = code;
                                throw error;
                            }
                            throw deserializedException[code];
                        case 5:
                            if (!(messageType === "event")) return [3, 9];
                            event = (_b = {},
                                _b[message.headers[":event-type"].value] = message,
                                _b);
                            return [4, __await(options.deserializer(event))];
                        case 6:
                            deserialized = _d.sent();
                            if (deserialized.$unknown)
                                return [3, 10];
                            return [4, __await(deserialized)];
                        case 7: return [4, _d.sent()];
                        case 8:
                            _d.sent();
                            return [3, 10];
                        case 9: throw Error("Unrecognizable event type: " + message.headers[":event-type"].value);
                        case 10: return [3, 1];
                        case 11: return [3, 18];
                        case 12:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3, 18];
                        case 13:
                            _d.trys.push([13, , 16, 17]);
                            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];
                            return [4, __await(_c.call(source_1))];
                        case 14:
                            _d.sent();
                            _d.label = 15;
                        case 15: return [3, 17];
                        case 16:
                            if (e_1) throw e_1.error;
                            return [7];
                        case 17: return [7];
                        case 18: return [2];
                    }
                });
            });
        },
        _a;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VW5tYXJzaGFsbGVkU3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dldFVubWFyc2hhbGxlZFN0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBU0EsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxNQUFpQyxFQUNqQyxPQUFxQzs7SUFFckM7UUFDRSxHQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUc7Ozs7Ozs7Ozs0QkFDSSxXQUFBLGNBQUEsTUFBTSxDQUFBOzs7Ozs0QkFBZixLQUFLLG1CQUFBLENBQUE7NEJBQ2QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUMzQyxXQUFXLEdBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBckMsQ0FBc0M7aUNBQzVELENBQUEsV0FBVyxLQUFLLE9BQU8sQ0FBQSxFQUF2QixjQUF1Qjs0QkFFbkIsY0FBYyxHQUFHLElBQUksS0FBSyxDQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFnQixJQUFJLGNBQWMsQ0FBQyxDQUFDOzRCQUN4RyxjQUFjLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBZSxDQUFDOzRCQUNyRSxNQUFNLGNBQWMsQ0FBQzs7aUNBQ1osQ0FBQSxXQUFXLEtBQUssV0FBVyxDQUFBLEVBQTNCLGNBQTJCOzRCQUU5QixJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEtBQWUsQ0FBQzs0QkFDMUQsU0FBUyxhQUFLLEdBQUMsSUFBSSxJQUFHLE9BQU8sS0FBRSxDQUFDOzRCQUVSLG1CQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUE7OzRCQUE3RCxxQkFBcUIsR0FBRyxTQUFxQzs0QkFDbkUsSUFBSSxxQkFBcUIsQ0FBQyxRQUFRLEVBQUU7Z0NBRTVCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dDQUN0RCxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQ0FDbEIsTUFBTSxLQUFLLENBQUM7NkJBQ2I7NEJBQ0QsTUFBTSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7aUNBQ3pCLENBQUEsV0FBVyxLQUFLLE9BQU8sQ0FBQSxFQUF2QixjQUF1Qjs0QkFDMUIsS0FBSztnQ0FDVCxHQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBZSxJQUFHLE9BQU87bUNBQzFELENBQUM7NEJBQ21CLG1CQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUE7OzRCQUFoRCxZQUFZLEdBQUcsU0FBaUM7NEJBQ3RELElBQUksWUFBWSxDQUFDLFFBQVE7Z0NBQUUsZUFBUzsrQ0FDOUIsWUFBWTtnQ0FBbEIsc0JBQWtCOzs0QkFBbEIsU0FBa0IsQ0FBQzs7Z0NBRW5CLE1BQU0sS0FBSyxDQUFDLGdDQUE4QixPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUd2RjtXQUNEO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBFdmVudE1hcnNoYWxsZXIgfSBmcm9tIFwiQGF3cy1zZGsvZXZlbnRzdHJlYW0tbWFyc2hhbGxlclwiO1xuaW1wb3J0IHsgRW5jb2RlciwgTWVzc2FnZSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBVbm1hcnNoYWxsZWRTdHJlYW1PcHRpb25zPFQ+ID0ge1xuICBldmVudE1hcnNoYWxsZXI6IEV2ZW50TWFyc2hhbGxlcjtcbiAgZGVzZXJpYWxpemVyOiAoaW5wdXQ6IHsgW25hbWU6IHN0cmluZ106IE1lc3NhZ2UgfSkgPT4gUHJvbWlzZTxUPjtcbiAgdG9VdGY4OiBFbmNvZGVyO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVubWFyc2hhbGxlZFN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhbnkgfT4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5PixcbiAgb3B0aW9uczogVW5tYXJzaGFsbGVkU3RyZWFtT3B0aW9uczxUPlxuKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gIHJldHVybiB7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogYXN5bmMgZnVuY3Rpb24qICgpIHtcbiAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc291cmNlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBvcHRpb25zLmV2ZW50TWFyc2hhbGxlci51bm1hcnNoYWxsKGNodW5rKTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogbWVzc2FnZVR5cGUgfSA9IG1lc3NhZ2UuaGVhZGVyc1tcIjptZXNzYWdlLXR5cGVcIl07XG4gICAgICAgIGlmIChtZXNzYWdlVHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgLy8gVW5tb2RlbGVkIGV4Y2VwdGlvbiBpbiBldmVudFxuICAgICAgICAgIGNvbnN0IHVubW9kZWxlZEVycm9yID0gbmV3IEVycm9yKChtZXNzYWdlLmhlYWRlcnNbXCI6ZXJyb3ItbWVzc2FnZVwiXS52YWx1ZSBhcyBzdHJpbmcpIHx8IFwiVW5rbm93bkVycm9yXCIpO1xuICAgICAgICAgIHVubW9kZWxlZEVycm9yLm5hbWUgPSBtZXNzYWdlLmhlYWRlcnNbXCI6ZXJyb3ItY29kZVwiXS52YWx1ZSBhcyBzdHJpbmc7XG4gICAgICAgICAgdGhyb3cgdW5tb2RlbGVkRXJyb3I7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUgPT09IFwiZXhjZXB0aW9uXCIpIHtcbiAgICAgICAgICAvLyBGb3IgbW9kZWxlZCBleGNlcHRpb24sIHB1c2ggaXQgdG8gZGVzZXJpYWxpemVyIGFuZCB0aHJvdyBhZnRlciBkZXNlcmlhbGl6aW5nXG4gICAgICAgICAgY29uc3QgY29kZSA9IG1lc3NhZ2UuaGVhZGVyc1tcIjpleGNlcHRpb24tdHlwZVwiXS52YWx1ZSBhcyBzdHJpbmc7XG4gICAgICAgICAgY29uc3QgZXhjZXB0aW9uID0geyBbY29kZV06IG1lc3NhZ2UgfTtcbiAgICAgICAgICAvLyBHZXQgcGFyc2VkIGV4Y2VwdGlvbiBldmVudCBpbiBrZXkoZXJyb3IgY29kZSkgdmFsdWUoc3RydWN0dXJlZCBlcnJvcikgcGFpci5cbiAgICAgICAgICBjb25zdCBkZXNlcmlhbGl6ZWRFeGNlcHRpb24gPSBhd2FpdCBvcHRpb25zLmRlc2VyaWFsaXplcihleGNlcHRpb24pO1xuICAgICAgICAgIGlmIChkZXNlcmlhbGl6ZWRFeGNlcHRpb24uJHVua25vd24pIHtcbiAgICAgICAgICAgIC8vdGhpcyBpcyBhbiB1bm1vZGVsZWQgZXhjZXB0aW9uIHRoZW4gdHJ5IHBhcnNpbmcgaXQgd2l0aCBiZXN0IGVmZm9ydFxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3Iob3B0aW9ucy50b1V0ZjgobWVzc2FnZS5ib2R5KSk7XG4gICAgICAgICAgICBlcnJvci5uYW1lID0gY29kZTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBkZXNlcmlhbGl6ZWRFeGNlcHRpb25bY29kZV07XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUgPT09IFwiZXZlbnRcIikge1xuICAgICAgICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICAgICAgW21lc3NhZ2UuaGVhZGVyc1tcIjpldmVudC10eXBlXCJdLnZhbHVlIGFzIHN0cmluZ106IG1lc3NhZ2UsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBhd2FpdCBvcHRpb25zLmRlc2VyaWFsaXplcihldmVudCk7XG4gICAgICAgICAgaWYgKGRlc2VyaWFsaXplZC4kdW5rbm93bikgY29udGludWU7XG4gICAgICAgICAgeWllbGQgZGVzZXJpYWxpemVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IEVycm9yKGBVbnJlY29nbml6YWJsZSBldmVudCB0eXBlOiAke21lc3NhZ2UuaGVhZGVyc1tcIjpldmVudC10eXBlXCJdLnZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==
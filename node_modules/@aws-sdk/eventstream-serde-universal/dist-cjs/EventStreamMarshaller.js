"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
const eventstream_marshaller_1 = require("@aws-sdk/eventstream-marshaller");
const getChunkedStream_1 = require("./getChunkedStream");
const getUnmarshalledStream_1 = require("./getUnmarshalledStream");
class EventStreamMarshaller {
    constructor({ utf8Encoder, utf8Decoder }) {
        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
        const chunkedStream = getChunkedStream_1.getChunkedStream(body);
        const unmarshalledStream = getUnmarshalledStream_1.getUnmarshalledStream(chunkedStream, {
            eventMarshaller: this.eventMarshaller,
            deserializer,
            toUtf8: this.utfEncoder,
        });
        return unmarshalledStream;
    }
    serialize(input, serializer) {
        const self = this;
        const serializedIterator = async function* () {
            for await (const chunk of input) {
                const payloadBuf = self.eventMarshaller.marshall(serializer(chunk));
                yield payloadBuf;
            }
            yield new Uint8Array(0);
        };
        return {
            [Symbol.asyncIterator]: serializedIterator,
        };
    }
}
exports.EventStreamMarshaller = EventStreamMarshaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0RUFBMkY7QUFHM0YseURBQXNEO0FBQ3RELG1FQUFnRTtBQVNoRSxNQUFhLHFCQUFxQjtJQUdoQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBZ0M7UUFDcEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLDhDQUFlLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXLENBQ1QsSUFBK0IsRUFDL0IsWUFBaUU7UUFFakUsTUFBTSxhQUFhLEdBQUcsbUNBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsTUFBTSxrQkFBa0IsR0FBRyw2Q0FBcUIsQ0FBQyxhQUFhLEVBQUU7WUFDOUQsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLFlBQVk7WUFDWixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDeEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBRUQsU0FBUyxDQUFJLEtBQXVCLEVBQUUsVUFBaUM7UUFFckUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxTQUFTLENBQUM7WUFDeEMsSUFBSSxLQUFLLEVBQUUsTUFBTSxLQUFLLElBQUksS0FBSyxFQUFFO2dCQUMvQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxVQUFVLENBQUM7YUFDbEI7WUFFRCxNQUFNLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQztRQUNGLE9BQU87WUFDTCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxrQkFBa0I7U0FDM0MsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBDRCxzREFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudFN0cmVhbU1hcnNoYWxsZXIgYXMgRXZlbnRNYXJzaGFsbGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2V2ZW50c3RyZWFtLW1hcnNoYWxsZXJcIjtcbmltcG9ydCB7IERlY29kZXIsIEVuY29kZXIsIEV2ZW50U3RyZWFtTWFyc2hhbGxlciBhcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyLCBNZXNzYWdlIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IGdldENodW5rZWRTdHJlYW0gfSBmcm9tIFwiLi9nZXRDaHVua2VkU3RyZWFtXCI7XG5pbXBvcnQgeyBnZXRVbm1hcnNoYWxsZWRTdHJlYW0gfSBmcm9tIFwiLi9nZXRVbm1hcnNoYWxsZWRTdHJlYW1cIjtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudFN0cmVhbU1hcnNoYWxsZXIgZXh0ZW5kcyBJRXZlbnRTdHJlYW1NYXJzaGFsbGVyIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucyB7XG4gIHV0ZjhFbmNvZGVyOiBFbmNvZGVyO1xuICB1dGY4RGVjb2RlcjogRGVjb2Rlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50U3RyZWFtTWFyc2hhbGxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRNYXJzaGFsbGVyOiBFdmVudE1hcnNoYWxsZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgdXRmRW5jb2RlcjogRW5jb2RlcjtcbiAgY29uc3RydWN0b3IoeyB1dGY4RW5jb2RlciwgdXRmOERlY29kZXIgfTogRXZlbnRTdHJlYW1NYXJzaGFsbGVyT3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnRNYXJzaGFsbGVyID0gbmV3IEV2ZW50TWFyc2hhbGxlcih1dGY4RW5jb2RlciwgdXRmOERlY29kZXIpO1xuICAgIHRoaXMudXRmRW5jb2RlciA9IHV0ZjhFbmNvZGVyO1xuICB9XG5cbiAgZGVzZXJpYWxpemU8VD4oXG4gICAgYm9keTogQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5PixcbiAgICBkZXNlcmlhbGl6ZXI6IChpbnB1dDogeyBbZXZlbnQ6IHN0cmluZ106IE1lc3NhZ2UgfSkgPT4gUHJvbWlzZTxUPlxuICApOiBBc3luY0l0ZXJhYmxlPFQ+IHtcbiAgICBjb25zdCBjaHVua2VkU3RyZWFtID0gZ2V0Q2h1bmtlZFN0cmVhbShib2R5KTtcbiAgICBjb25zdCB1bm1hcnNoYWxsZWRTdHJlYW0gPSBnZXRVbm1hcnNoYWxsZWRTdHJlYW0oY2h1bmtlZFN0cmVhbSwge1xuICAgICAgZXZlbnRNYXJzaGFsbGVyOiB0aGlzLmV2ZW50TWFyc2hhbGxlcixcbiAgICAgIGRlc2VyaWFsaXplcixcbiAgICAgIHRvVXRmODogdGhpcy51dGZFbmNvZGVyLFxuICAgIH0pO1xuICAgIHJldHVybiB1bm1hcnNoYWxsZWRTdHJlYW07XG4gIH1cblxuICBzZXJpYWxpemU8VD4oaW5wdXQ6IEFzeW5jSXRlcmFibGU8VD4sIHNlcmlhbGl6ZXI6IChldmVudDogVCkgPT4gTWVzc2FnZSk6IEFzeW5jSXRlcmFibGU8VWludDhBcnJheT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRJdGVyYXRvciA9IGFzeW5jIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWRCdWYgPSBzZWxmLmV2ZW50TWFyc2hhbGxlci5tYXJzaGFsbChzZXJpYWxpemVyKGNodW5rKSk7XG4gICAgICAgIHlpZWxkIHBheWxvYWRCdWY7XG4gICAgICB9XG4gICAgICAvLyBFbmRpbmcgZnJhbWVcbiAgICAgIHlpZWxkIG5ldyBVaW50OEFycmF5KDApO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IHNlcmlhbGl6ZWRJdGVyYXRvcixcbiAgICB9O1xuICB9XG59XG4iXX0=
import { __assign, __awaiter, __generator } from "tslib";
export function locationConstraintMiddleware(options) {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var CreateBucketConfiguration, region;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        CreateBucketConfiguration = args.input.CreateBucketConfiguration;
                        return [4, options.region()];
                    case 1:
                        region = _a.sent();
                        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
                            args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region } }) });
                        }
                        return [2, next(args)];
                }
            });
        }); };
    };
}
export var locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true,
};
export var getLocationConstraintPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWtCQSxNQUFNLFVBQVUsNEJBQTRCLENBQzFDLE9BQXlDO0lBRDNDLGlCQW9CQztJQWpCQyxPQUFPLFVBQWdDLElBQW9DO1FBQ3pFLE9BQUEsVUFBTyxJQUFxQzs7Ozs7d0JBQ2xDLHlCQUF5QixHQUFLLElBQUksQ0FBQyxLQUFLLDBCQUFmLENBQWdCO3dCQUVsQyxXQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQTs7d0JBQS9CLE1BQU0sR0FBRyxTQUFzQjt3QkFDckMsSUFBSSxDQUFDLHlCQUF5QixJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLEVBQUU7NEJBQy9FLElBQUkseUJBQ0MsSUFBSSxLQUNQLEtBQUssd0JBQ0EsSUFBSSxDQUFDLEtBQUssS0FDYix5QkFBeUIsRUFBRSxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLE1BRWpHLENBQUM7eUJBQ0g7d0JBRUQsV0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUM7OzthQUNuQjtJQWZELENBZUMsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxtQ0FBbUMsR0FBNkI7SUFDM0UsSUFBSSxFQUFFLFlBQVk7SUFDbEIsSUFBSSxFQUFFLENBQUMscUJBQXFCLEVBQUUsNkJBQTZCLENBQUM7SUFDNUQsSUFBSSxFQUFFLDhCQUE4QjtJQUNwQyxRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRyxVQUFDLE1BQXdDLElBQTBCLE9BQUEsQ0FBQztJQUM3RyxZQUFZLEVBQUUsVUFBQyxXQUFXO1FBQ3hCLFdBQVcsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUM3RixDQUFDO0NBQ0YsQ0FBQyxFQUo0RyxDQUk1RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5pdGlhbGl6ZUhhbmRsZXIsXG4gIEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMsXG4gIEluaXRpYWxpemVIYW5kbGVyT3V0cHV0LFxuICBJbml0aWFsaXplTWlkZGxld2FyZSxcbiAgTWV0YWRhdGFCZWFyZXIsXG4gIFBsdWdnYWJsZSxcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvblwiO1xuXG4vKipcbiAqIFRoaXMgbWlkZGxld2FyZSBtb2RpZmllcyB0aGUgaW5wdXQgb24gUzMgQ3JlYXRlQnVja2V0IHJlcXVlc3RzLiAgSWYgdGhlIExvY2F0aW9uQ29uc3RyYWludCBoYXMgbm90IGJlZW4gc2V0LCB0aGlzXG4gKiBtaWRkbGV3YXJlIHdpbGwgc2V0IGEgTG9jYXRpb25Db25zdHJhaW50IHRvIG1hdGNoIHRoZSBjb25maWd1cmVkIHJlZ2lvbi4gIFRoZSBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIHdpbGwgYmVcbiAqIHJlbW92ZWQgZW50aXJlbHkgb24gcmVxdWVzdHMgdG8gdGhlIHVzLWVhc3QtMSByZWdpb24uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmUoXG4gIG9wdGlvbnM6IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnXG4pOiBJbml0aWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihuZXh0OiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4pOiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4gPT5cbiAgICBhc3luYyAoYXJnczogSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHM8YW55Pik6IFByb21pc2U8SW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgICAgY29uc3QgeyBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIH0gPSBhcmdzLmlucHV0O1xuICAgICAgLy9BZnRlciByZWdpb24gY29uZmlnIHJlc29sdXRpb24sIHJlZ2lvbiBpcyBhIFByb3ZpZGVyPHN0cmluZz5cbiAgICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IG9wdGlvbnMucmVnaW9uKCk7XG4gICAgICBpZiAoIUNyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24gfHwgIUNyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24uTG9jYXRpb25Db25zdHJhaW50KSB7XG4gICAgICAgIGFyZ3MgPSB7XG4gICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgLi4uYXJncy5pbnB1dCxcbiAgICAgICAgICAgIENyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb246IHJlZ2lvbiA9PT0gXCJ1cy1lYXN0LTFcIiA/IHVuZGVmaW5lZCA6IHsgTG9jYXRpb25Db25zdHJhaW50OiByZWdpb24gfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZU9wdGlvbnM6IEluaXRpYWxpemVIYW5kbGVyT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJpbml0aWFsaXplXCIsXG4gIHRhZ3M6IFtcIkxPQ0FUSU9OX0NPTlNUUkFJTlRcIiwgXCJDUkVBVEVfQlVDS0VUX0NPTkZJR1VSQVRJT05cIl0sXG4gIG5hbWU6IFwibG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMb2NhdGlvbkNvbnN0cmFpbnRQbHVnaW4gPSAoY29uZmlnOiBMb2NhdGlvbkNvbnN0cmFpbnRSZXNvbHZlZENvbmZpZyk6IFBsdWdnYWJsZTxhbnksIGFueT4gPT4gKHtcbiAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQobG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZShjb25maWcpLCBsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocationConstraintPlugin = exports.locationConstraintMiddlewareOptions = exports.locationConstraintMiddleware = void 0;
function locationConstraintMiddleware(options) {
    return (next) => async (args) => {
        const { CreateBucketConfiguration } = args.input;
        const region = await options.region();
        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
            args = {
                ...args,
                input: {
                    ...args.input,
                    CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region },
                },
            };
        }
        return next(args);
    };
}
exports.locationConstraintMiddleware = locationConstraintMiddleware;
exports.locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true,
};
const getLocationConstraintPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);
    },
});
exports.getLocationConstraintPlugin = getLocationConstraintPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBa0JBLFNBQWdCLDRCQUE0QixDQUMxQyxPQUF5QztJQUV6QyxPQUFPLENBQWdDLElBQW9DLEVBQWtDLEVBQUUsQ0FDN0csS0FBSyxFQUFFLElBQXFDLEVBQTRDLEVBQUU7UUFDeEYsTUFBTSxFQUFFLHlCQUF5QixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUVqRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsRUFBRTtZQUMvRSxJQUFJLEdBQUc7Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLEtBQUssRUFBRTtvQkFDTCxHQUFHLElBQUksQ0FBQyxLQUFLO29CQUNiLHlCQUF5QixFQUFFLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUU7aUJBQy9GO2FBQ0YsQ0FBQztTQUNIO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQXBCRCxvRUFvQkM7QUFFWSxRQUFBLG1DQUFtQyxHQUE2QjtJQUMzRSxJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSw2QkFBNkIsQ0FBQztJQUM1RCxJQUFJLEVBQUUsOEJBQThCO0lBQ3BDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxNQUF3QyxFQUF1QixFQUFFLENBQUMsQ0FBQztJQUM3RyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxFQUFFLDJDQUFtQyxDQUFDLENBQUM7SUFDN0YsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEsMkJBQTJCLCtCQUlyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBMb2NhdGlvbkNvbnN0cmFpbnRSZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb25cIjtcblxuLyoqXG4gKiBUaGlzIG1pZGRsZXdhcmUgbW9kaWZpZXMgdGhlIGlucHV0IG9uIFMzIENyZWF0ZUJ1Y2tldCByZXF1ZXN0cy4gIElmIHRoZSBMb2NhdGlvbkNvbnN0cmFpbnQgaGFzIG5vdCBiZWVuIHNldCwgdGhpc1xuICogbWlkZGxld2FyZSB3aWxsIHNldCBhIExvY2F0aW9uQ29uc3RyYWludCB0byBtYXRjaCB0aGUgY29uZmlndXJlZCByZWdpb24uICBUaGUgQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB3aWxsIGJlXG4gKiByZW1vdmVkIGVudGlyZWx5IG9uIHJlcXVlc3RzIHRvIHRoZSB1cy1lYXN0LTEgcmVnaW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlKFxuICBvcHRpb25zOiBMb2NhdGlvbkNvbnN0cmFpbnRSZXNvbHZlZENvbmZpZ1xuKTogSW5pdGlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+IHtcbiAgcmV0dXJuIDxPdXRwdXQgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlcj4obmV4dDogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+KTogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+ID0+XG4gICAgYXN5bmMgKGFyZ3M6IEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzPGFueT4pOiBQcm9taXNlPEluaXRpYWxpemVIYW5kbGVyT3V0cHV0PE91dHB1dD4+ID0+IHtcbiAgICAgIGNvbnN0IHsgQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB9ID0gYXJncy5pbnB1dDtcbiAgICAgIC8vQWZ0ZXIgcmVnaW9uIGNvbmZpZyByZXNvbHV0aW9uLCByZWdpb24gaXMgYSBQcm92aWRlcjxzdHJpbmc+XG4gICAgICBjb25zdCByZWdpb24gPSBhd2FpdCBvcHRpb25zLnJlZ2lvbigpO1xuICAgICAgaWYgKCFDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIHx8ICFDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uLkxvY2F0aW9uQ29uc3RyYWludCkge1xuICAgICAgICBhcmdzID0ge1xuICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIC4uLmFyZ3MuaW5wdXQsXG4gICAgICAgICAgICBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uOiByZWdpb24gPT09IFwidXMtZWFzdC0xXCIgPyB1bmRlZmluZWQgOiB7IExvY2F0aW9uQ29uc3RyYWludDogcmVnaW9uIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmVPcHRpb25zOiBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICB0YWdzOiBbXCJMT0NBVElPTl9DT05TVFJBSU5UXCIsIFwiQ1JFQVRFX0JVQ0tFVF9DT05GSUdVUkFUSU9OXCJdLFxuICBuYW1lOiBcImxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmVcIixcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25Db25zdHJhaW50UGx1Z2luID0gKGNvbmZpZzogTG9jYXRpb25Db25zdHJhaW50UmVzb2x2ZWRDb25maWcpOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmUoY29uZmlnKSwgbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LFxufSk7XG4iXX0=